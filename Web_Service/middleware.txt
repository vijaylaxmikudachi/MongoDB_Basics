Middleware::


Middleware is a crucial concept in many programming environments, 
especially in backend development. 
In the context of web applications, middleware is a layer that sits between the request (from the client) and 
the final response (from the server). 
It is essentially a function (or a series of functions) that intercepts, processes, 
or transforms HTTP requests and responses as they pass through the system.

Middleware can perform a variety of tasks, 
such as authentication, logging, error handling, parsing request bodies, and routing. 
It helps keep the application modular, as each middleware function typically handles a single, specific responsibility.

Where is Middleware Used?
Middleware is extensively used in frameworks like Express.js (Node.js), Django (Python), and Flask (Python)

Characteristics of Middleware
Chained Execution: Middleware functions can be stacked, meaning multiple middleware functions can be executed in sequence.
Request-Response Cycle: Middleware interacts with both requests (before they reach the final route handler) 
                        and responses (before they are sent back to the client).
Can Modify Requests/Responses: Middleware can modify the incoming request object (req), 
                               the outgoing response object (res), or both.
Control Flow: Middleware functions either complete the request cycle (by sending a response) or 
              pass control to the next middleware in the stack using the next() function.

[Client Request]
    ↓
[Logging Middleware] → [Authentication Middleware] → [Request Validation Middleware] → [Route Handler] 
    ↓
[Server Response]

Application:-

1.Logging: To log every request that comes to the server, including details like timestamps, IP addresses, 
           and request methods.
2.Authentication: To verify that the user is authenticated before accessing a resource.
3.Authorization: To check if the authenticated user has the proper permissions to access a resource.
4.Request Parsing: To parse incoming request bodies (e.g., JSON, URL-encoded, or multipart form data).
5.Error Handling: To catch errors that occur during the request-response cycle and 
                  return meaningful responses to the client.
6.Rate Limiting: To limit the number of requests a client can make in a given time frame, preventing abuse.
7.Compression: To compress the response before sending it to the client, improving performance.
8.CORS (Cross-Origin Resource Sharing): To manage cross-origin access to your resources from other domains.
